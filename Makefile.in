# The top-level Makefile that is used to build 

EXECUTABLE_SUBDIRS := \
	cpp/apps/monarch-bench 

SUBDIRS := 
	$(EXECUTABLE_SUBDIRS)

INSTALL_LIBRARIES := \
	dist/lib/libmobenchmark.so

ifndef PRINT_DIRECTORIES
PRINT_DIRECTORIES_OPTS = --no-print-directory -s
endif
ifdef PRINT_COMMANDS
PRINT_COMMANDS_OPTS = PRINT_COMMANDS=$(PRINT_COMMANDS)
endif
# Maximum load is the number of CPU cores + 1
MAX_LOAD = $(shell (if [ -e /proc/cpuinfo ]; then (cat /proc/cpuinfo | grep -i ^processor && echo processor) | wc -l; else echo 2; fi))
MAKE_JOB_OPTS ?= -j -l $(MAX_LOAD).0

MAKE_CMD = $(PRINT_COMMANDS_OPTS) $(MAKE) $(MAKE_JOB_OPTS) $(PRINT_DIRECTORIES_OPTS)
MAKE_DIR = $(PRINT_COMMANDS_OPTS) $(MAKE_CMD) -C $(dir)

.PHONY: all verbose clean test internal-docs clean-docs

all: 
	@$(foreach dir,$(SUBDIRS),IGNORE_DEPENDENCIES=true $(MAKE_DIR) build-headers &&) true
	@$(foreach dir,$(SUBDIRS),$(MAKE_DIR) build-objects build-libraries &&) true
	@$(foreach dir,$(EXECUTABLE_SUBDIRS),$(MAKE_DIR) build-executables &&) true

clean:
	@rm -rf build
	@rm -rf dist
	@echo "Cleaned all objects and libraries."

# Note: When building for multiple archs this will see all the tests and
#       will likely fail for non-current archs.  This method is used since
#       it will work for single arch builds and is difficult to know which
#       arch to specify otherwise.
verbose:
	PRINT_DIRECTORIES=true $(MAKE) all

verbose-commands:
	PRINT_DIRECTORIES=true PRINT_COMMANDS=true $(MAKE) all

